x_label = "Vote Count",
y_label = "Number of TV Series",
title = "Histogram of TV Series Vote Count",
type = 0)
# VOTE AVERAGE
plot_histogram(
data = tmdb_data,
column_name = "vote_average",
x_label = "Vote Average",
y_label = "Number of TV Series",
title = "Histogram of TV Series Vote Average",
type = 0)
# EPISODE RUN TIME
plot_histogram(
data = tmdb_data,
column_name = "episode_run_time",
x_label = "Episode Run Time (in minutes)",
y_label = "Number of TV Series",
title = "Histogram of Runtime of TV Series Episodes",
type = 0)
# PRODUCTION COMPANIES
plot_histogram(
data = tmdb_data,
column_name = "production_companies",
x_label = "Production Company",
y_label = "Number of TV Series",
title = "Production Companies TV Series Portfolio Count",
type = 1)
# GENRES
plot_histogram(
data = tmdb_data,
column_name = "genres",
x_label = "Genre",
y_label = "Number of TV Series",
title = "Genres of TV Series",
type = 1)
# LANGUAGES
plot_histogram(
data = tmdb_data,
column_name = "languages",
x_label = "Language",
y_label = "Number of TV Series",
title = "Languages of TV Series",
type = 1)
# NETWORKS
plot_histogram(
data = tmdb_data,
column_name = "networks",
x_label = "Network",
y_label = "Number of TV Series",
title = "Dominant Networks of TV Series",
type = 1)
# ORIGIN COUNTRY
plot_histogram(
data = tmdb_data,
column_name = "origin_country",
x_label = "Origin Country",
y_label = "Number of TV Series",
title = "TV Series Origin Countries",
type = 1)
# SPOKEN LANGUAGE
plot_histogram(
data = tmdb_data,
column_name = "spoken_languages",
x_label = "Spoken Language",
y_label = "Number of TV Series",
title = "Spoken Languages of TV Series",
type = 1)
# PRODUCTION COUNTRIES
plot_histogram(
data = tmdb_data,
column_name = "production_countries",
x_label = "Production Country",
y_label = "Number of TV Series",
title = "TV Series Production Countries",
type = 1)
# ORIGINAL LANGUAGE
plot_histogram(
data = tmdb_data,
column_name = "original_language",
x_label = "Language",
y_label = "Number of TV Series",
title = "Original Language(ISO 639-1 Code) of TV Series",
type = 2)
# STATUS
plot_histogram(
data = tmdb_data,
column_name = "status",
x_label = "Status",
y_label = "Number of TV Series",
title = "Status of TV Series",
type = 2)
# ADULT
plot_histogram(
data = tmdb_data,
column_name = "adult",
x_label = "Adult Status",
y_label = "Number of TV Series",
title = "Adult Status of TV Series",
type = 2)
# IN PRODUCTION
plot_histogram(
data = tmdb_data,
column_name = "in_production",
x_label = "Production Status",
y_label = "Number of TV Series",
title = "Production Status of TV Series",
type = 2)
# POPULARITY
plot_histogram(
data = tmdb_data,
column_name = "popularity",
x_label = "Popularity",
y_label = "Number of TV Series",
title = "Popularity of TV Series",
type = 2)
# TYPE
plot_histogram(
data = tmdb_data,
column_name = "type",
x_label = "Series Type",
y_label = "Number of TV Series",
title = "Series Type of TV Series",
type = 2)
# POPULARITY
plot_histogram(
data = tmdb_data,
column_name = "popularity",
x_label = "Popularity",
y_label = "Number of TV Series",
title = "Popularity of TV Series",
type = 2)
# TYPE
plot_histogram(
data = tmdb_data,
column_name = "type",
x_label = "Series Type",
y_label = "Number of TV Series",
title = "Series Type of TV Series",
type = 2)
# Import the dataset
tmdb_data <- read.csv("TMDB_tv_dataset_v3.csv", header = TRUE)
summary(tmdb_data)
#  NUMBER OF SEASONS
plot_histogram(
data = tmdb_data,
column_name = "number_of_seasons",
x_label = "Range of Season Count",
y_label = "Number of TV Series",
title = "Histogram of TV Series Season Count",
type = 0)
col_stats(cols)
source("./utils.R")
df1 <- tmdb_data[tmdb_data$type == "Scripted", ] # Can also use: df <- subset(df, type == "Scripted")
display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average")
source("./utils.R")
print(str(df1))
display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average")
print(str(df1))
print(unique(df1$popularity))
print(unique(df1$popularity))
print(unique(df1$vote_average))
source("./utils.R")
df1 <- tmdb_data[tmdb_data$type == "Scripted", ] # Can also use: df <- subset(df, type == "Scripted")
print(str(df1))
print(unique(df1$popularity))
print(unique(df1$vote_average))
display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average")
display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average")
function (new, existing = NULL)
{
if (is.null(new)) {
return(existing)
}
if (is.factor(new) || !typeof(new) %in% c("integer", "double")) {
stop("Discrete value supplied to continuous scale",
call. = FALSE)
}
suppressWarnings(range(existing, new, na.rm = TRUE, finite = TRUE))
}
Q
display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average")
source("./utils.R")
display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average")
df1["popularity"]
source("./utils.R")
df1 <- tmdb_data[tmdb_data$type == "Scripted", ] # Can also use: df <- subset(df, type == "Scripted")
display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average")
source("./utils.R")
display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average")
source("./utils.R")
df1 <- tmdb_data[tmdb_data$type == "Scripted", ] # Can also use: df <- subset(df, type == "Scripted")
display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average")
col_stats(cols)
df1 <- tmdb_data[tmdb_data$type == "Scripted", tmdb_data$popularity <= 10] # Can also use: df <- subset(df, type == "Scripted")
display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average")
df1 <- tmdb_data[tmdb_data$type == "Scripted" & tmdb_data$popularity <= 10, ] # Can also use: df <- subset(df, type == "Scripted")
display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average")
print(length(df1["popularity"]))
print(length(df1["vote_average"]))
print(df1["popularity"])
print(df1["vote_average"])
source("./utils.R")
display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average")
print(df1["vote_average"])
source("./utils.R")
#display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average")
# Default scatter plot
display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average")
source("./utils.R")
#display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average")
# Default scatter plot
display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average")
# Scatter plot with equal aspect ratio
display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average", equal_aspect = TRUE)
# Scatter plot with custom xlim and ylim
display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average", xlim = c(0, 10), ylim = c(0, 10))
source("./utils.R")
# Scatter plot with custom xlim and ylim
display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average", xlim = c(0, 10), ylim = c(0, 10))
source("./utils.R")
# Scatter plot with custom xlim and ylim
display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average", xlim = c(0, 10), ylim = c(0, 10))
source("./utils.R")
# Scatter plot with custom xlim and ylim
display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average", xlim = c(0, 10), ylim = c(0, 10))
source("./utils.R")
# Scatter plot with custom xlim and ylim
display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average", xlim = c(0, 10), ylim = c(0, 10))
source("./utils.R")
source("./utils.R")
# Default scatter plot
df2 <- tmdb_data[tmdb_data$type == "Scripted" & tmdb_data$episode_run_time <= 175, ]
display_scatter_plot(data = df2, x_col = "number_of_episodes", y_col = "episode_run_time")
scatter_plot <- ggplot(data, aes(x=df2["number_of_episodes"], y=df2["episode_run_time"])) + geom_point() +
labs(x = x_col, y = y_col, title = "Scatter Plot")
print(scatter_plot)
scatter_plot <- ggplot(df2, aes(x=df2["number_of_episodes"], y=df2["episode_run_time"])) + geom_point() +
labs(x = x_col, y = y_col, title = "Scatter Plot")
print(scatter_plot)
source("./utils.R")
# Default scatter plot
df2 <- tmdb_data[tmdb_data$type == "Scripted" & tmdb_data$episode_run_time <= 175, ]
display_scatter_plot(data = df2, x_col = "number_of_episodes", y_col = "episode_run_time")
df1 <- tmdb_data[tmdb_data$type == "Scripted" & tmdb_data$popularity <= 10, ] # Can also use: df <- subset(df, type == "Scripted")
source("./utils.R")
scatter_plot <- ggplot(df1, aes(x=df2$number_of_episodes, y=df2$episode_run_time)) + geom_point() +
labs(x = "x_col", y = "y_col", title = "Scatter Plot")
print(scatter_plot)
X <- df2$number_of_episodes
Y <- df2$episode_run_time
scatter_plot <- ggplot(df1, aes(x=X, y=Y)) + geom_point() +
labs(x = "x_col", y = "y_col", title = "Scatter Plot")
print(scatter_plot)
scatter_plot <- ggplot(df1, aes(x=number_of_episodes, y=episode_run_time)) + geom_point() +
labs(x = "x_col", y = "y_col", title = "Scatter Plot")
print(scatter_plot)
str(number_of_episodes)
df1 <- tmdb_data[tmdb_data$type == "Scripted" & tmdb_data$popularity <= 10, ] # Can also use: df <- subset(df, type == "Scripted")
source("./utils.R")
display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average")
df1 <- tmdb_data[tmdb_data$type == "Scripted", ] # Can also use: df <- subset(df, type == "Scripted")
source("./utils.R")
display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average")
display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average",equal_aspect=T)
display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average", xlim = c(0, 10), ylim = c(0, 10))
source("./utils.R")
source("./utils.R")
# Vote average vs Popularity
df1 <- tmdb_data[tmdb_data$type == "Scripted", ] # Can also use: df <- subset(df, type == "Scripted")
display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average", x_label = "Popularity", y_label = "Average Vote", title = "Scatter plot of average votes of a scripted TV series with popularity")
source("./utils.R")
# Vote average vs Popularity
df1 <- tmdb_data[tmdb_data$type == "Scripted", ] # Can also use: df <- subset(df, type == "Scripted")
display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average", x_label = "Popularity", y_label = "Average Vote", title = "Scatter plot of average votes of a scripted TV series with popularity")
display_scatter_plot(data = df1, x_col = "popularity", y_col = "vote_average", x_label = "Popularity (restricted to max=10)", y_label = "Average Vote", title = "Scatter plot of average votes of a scripted TV series with popularity", xlim = c(0, 10), ylim = c(0, 10))
col_stats(cols)
#----> Vote average vs Popularity <----
df1 <- tmdb_data[tmdb_data$type == "Scripted", ] # Can also use: df <- subset(df, type == "Scripted")
display_scatter_plot(
data = df1,
x_col = "popularity",
y_col = "vote_average",
x_label = "Popularity",
y_label = "Average Vote",
title = "Scatter plot of average votes of a scripted TV series with popularity"
)
# Trimming all data points with popularity greater than 10
display_scatter_plot(
data = df1,
x_col = "popularity",
y_col = "vote_average",
x_label = "Popularity (restricted to max=10)",
y_label = "Average Vote",
title = "Scatter plot of average votes of a scripted TV series with popularity(cleaned)",
xlim = c(0, 10),
ylim = c(0, 10)
)
source("./utils.R")
print(process_episode_data(tmdb_data, 10, 90))
source("./utils.R")
print(process_episode_data(tmdb_data, 10, 90))
source("./utils.R")
print(process_episode_data(tmdb_data, 10, 90))
source("./utils.R")
print(process_episode_data(tmdb_data, 10, 90))
source("./utils.R")
print(process_episode_data(tmdb_data, 10, 90))
source("./utils.R")
print(process_episode_data(tmdb_data, 10, 90))
source("./utils.R")
print(process_episode_data(tmdb_data, 10, 90))
source("./utils.R")
print(process_episode_data(tmdb_data, 10, 90))
source("./utils.R")
print(process_episode_data(tmdb_data, 10, 90))
source("./utils.R")
print(process_episode_data(tmdb_data, 10, 90))
source("./utils.R")
display_box_plot(
data = df1,
x_col = "popularity",
y_col = "vote_average",
x_label = "Popularity",
y_label = "Average Vote",
title = "Box plot of average votes of a scripted TV series with popularity"
)
display_box_plot(
data = df1,
y_col = "popularity",
x_col = "vote_average",
x_label = "Popularity",
y_label = "Average Vote",
title = "Box plot of average votes of a scripted TV series with popularity"
)
display_box_plot(
data = df1,
y_col = "popularity",
x_col = "vote_average",
x_label = "Popularity",
y_label = "Average Vote",
title = "Box plot of average votes of a scripted TV series with popularity",
ylim = c(0, 10)
)
display_box_plot(
data = df1,
y_col = "popularity",
x_col = "vote_average",
x_label = "Popularity",
y_label = "Average Vote",
title = "Box plot of average votes of a scripted TV series with popularity",
ylim = c(0, 10)
)
source("./utils.R")
display_box_plot(
data = tmdb_data,
y_col = "popularity",
y_label = "Average Vote",
title = "Box plot of average votes of a scripted TV series with popularity",
ylim = c(0, 10)
)
source("./utils.R")
display_box_plot(
data = tmdb_data,
y_col = "popularity",
y_label = "Average Vote",
title = "Box plot of average votes of a scripted TV series with popularity",
ylim = c(0, 10)
)
source("./utils.R")
display_box_plot(
data = tmdb_data,
y_col = "popularity",
y_label = "Average Vote",
title = "Box plot of average votes of a scripted TV series with popularity",
ylim = c(0, 10)
)
source("./utils.R")
source("./utils.R")
display_box_plot(
data = tmdb_data,
y_col = "popularity",
y_label = "Average Vote",
title = "Box plot of average votes of a scripted TV series with popularity",
ylim = c(0, 10)
)
source("./utils.R")
display_box_plot(
data = tmdb_data,
y_col = "popularity",
y_label = "Average Vote",
title = "Box plot of average votes of a scripted TV series with popularity",
ylim = c(0, 10)
)
source("./utils.R")
df3 <- tmdb_data[tmdb_data["production_countries"] == "United Kingdom"]
cat(df3)
cat(head(table(df3)))
compare_box_plot(
data = df3,
fill_column = "type",
categories = c("Scripted", "Miniseries"),
y_col = "popularity",
y_label = "Popularity",
title = "Box plot of average votes of a scripted TV series with popularity",
ylim = c(0, 10)
)
df3.cols
df3.columns
df3 <- tmdb_data[tmdb_data$production_countries == "United Kingdom", ]
compare_box_plot(
data = df3,
fill_column = "type",
categories = c("Scripted", "Miniseries"),
y_col = "popularity",
y_label = "Popularity",
title = "Box plot of average votes of a scripted TV series with popularity",
ylim = c(0, 10)
)
source("./utils.R")
df3 <- tmdb_data[tmdb_data$production_countries == "United Kingdom", ]
compare_box_plot(
data = df3,
fill_column = "type",
categories = c("Scripted", "Miniseries"),
y_col = "popularity",
y_label = "Popularity",
title = "Box plot of average votes of a scripted TV series with popularity",
ylim = c(0, 10)
)
source("./utils.R")
df3 <- tmdb_data[tmdb_data$production_countries == "United Kingdom", ]
compare_box_plot(
data = df3,
fill_column = "type",
categories = c("Scripted", "Miniseries"),
y_col = "popularity",
y_label = "Popularity",
title = "Box plot of average votes of a scripted TV series with popularity",
ylim = c(0, 10)
)
source("./utils.R")
compare_box_plot(
data = df3,
fill_column = "type",
categories = c("Scripted", "Miniseries"),
y_col = "popularity",
y_label = "Popularity",
title = "Box plot of average votes of a scripted TV series with popularity",
ylim = c(0, 10)
)
df3 <- tmdb_data[tmdb_data$production_countries == "United Kingdom", ]
compare_box_plot(
data = df3,
fill_column = "type",
categories = c("Scripted", "Miniseries"),
y_col = "popularity",
y_label = "Popularity",
title = "Box plot of average votes of a scripted TV series with popularity",
ylim = c(0, 10)
)
compare_box_plot <- function(data, y_col, fill_column, categories=NULL, ylim = NULL, y_label = "Y Column data", title = "Box Plot") {
# Check if the specified columns exist in the data frame
if (!(y_col %in% names(data) && fill_column %in% names(data))) {
stop("Specified columns do not exist in the data frame.")
}
# Check data types of the specified columns
if (!is.numeric(data[[y_col]])) {
stop("y_col must be a numeric column.")
}
# Convert fill_column to factor
data[[fill_column]] <- as.factor(data[[fill_column]])
# Remove rows with missing values in the specified columns
data <- na.omit(data, cols = c(y_col, fill_column))
# Create the box plot with side-by-side boxes for each category
box_plot <- ggplot(data, aes_string(x = fill_column, y = y_col, fill = fill_column)) +
geom_boxplot(position = "dodge") +
labs(x = fill_column, y = y_label, title = title) +
scale_fill_manual(values = setNames(categories, categories))
# Set custom ylim if specified
if (!is.null(ylim)) {
box_plot <- box_plot + coord_cartesian(ylim = ylim)
}
# Check if "box_plots/" directory exists, create if not
if (!dir.exists("box_plots")) {
dir.create("box_plots")
}
print(box_plot)
# file_name <- paste("box_plots/", gsub(" ", "_", title), ".png", sep="")
# ggsave(file_name, plot = box_plot, width = 8, height = 6, units = "in", dpi = 300)
}
source("./utils.R")
compare_box_plot(
data = df3,
fill_column = "type",
categories = c("Scripted", "Miniseries"),
y_col = "popularity",
y_label = "Popularity",
title = "Box plot of average votes of a scripted TV series with popularity",
ylim = c(0, 10)
)
source("./utils.R")
df3 <- tmdb_data[tmdb_data$production_countries == "United Kingdom", ]
compare_box_plot(
data = df3,
fill_column = "type",
categories = c("Scripted", "Miniseries"),
y_col = "popularity",
y_label = "Popularity",
title = "Box plot of average votes of a scripted TV series with popularity",
ylim = c(0, 10)
)
